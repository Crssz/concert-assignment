// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  email     String   @unique
  hashedPassword  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  concerts      Concert[]
  reservations  Reservation[]
  reservationHistory ReservationHistory[]

  @@map("users")
}

model Concert {
  id          String   @id @default(uuid())
  name        String
  description String
  totalSeats  Int
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  reservations Reservation[]
  reservationHistory ReservationHistory[]

  @@map("concerts")
}

model Reservation {
  id        String   @id @default(uuid())
  concertId String
  concert   Concert  @relation(fields: [concertId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  seatNumber Int
  createdAt DateTime @default(now())
  
  @@unique([concertId, seatNumber])
  @@unique([concertId, userId])
  @@map("reservations")
}

model ReservationHistory {
  id        String   @id @default(uuid())
  concertId String
  concert   Concert  @relation(fields: [concertId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  seatNumber Int
  action    ReservationAction
  createdAt DateTime @default(now())
  
  @@map("reservation_history")
}

enum ReservationAction {
  RESERVED
  CANCELLED
}

